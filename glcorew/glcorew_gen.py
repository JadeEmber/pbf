#!/usr/bin/env python
#
# This is a highly modified version of gl3w_gen.py.
# The original version was written by Slavomir Kaslev
# as part of gl3w which is in the public domain
# and available at https://github.com/skaslev/gl3w.
#
# Copyright (c) 2013 Daniel Kirchner
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
#
import re
import os
import urllib.request, urllib.error, urllib.parse

# Parse function names from glcorearb.h
procs = []
p = re.compile(r'GLAPI.*APIENTRY\s+(\w+)')
with open('glcorearb.h', 'r') as f:
    for line in f:
        m = p.match(line)
        if m:
            procs.append(m.group(1))

def proc_t(proc):
    return { 'p': proc,
             'p_s': proc[2:],
             'p_t': 'PFN' + proc.upper() + 'PROC' }

# Generate glcorew.h
with open('glcorew.h', 'wt') as f:
    f.write (r'''/*
 * Copyright (c) 2013 Daniel Kirchner
 *
 * Copying and distribution of this file, with or without modification,
 * are permitted in any medium without royalty provided the copyright
 * notice and this notice are preserved.  This file is offered as-is,
 * without any warranty. 
 */
/* This file was generated by glcorew_gen.py.
 * Don't change it directly, change glcorew_gen.py instead. */
#ifndef GLCOREW_H
#define GLCOREW_H

#include "glcorearb.h"

typedef void *(*glcorewGetProcAddressCallback) (const char*);

void glcorewInit (glcorewGetProcAddressCallback getprocaddress);
GLAPI int APIENTRY glcorewUnsupported (...);

''')
    for proc in procs:
        f.write('extern %(p_t)s glcorew%(p_s)s;\n' % proc_t(proc))

    for proc in procs:
        f.write('#define %(p)s glcorew%(p_s)s\n' % proc_t(proc))
    f.write(r'''

#endif /* !defined OGLP_GLCOREW_H */
''')

# Generate glcorew.cpp
with open('glcorew.cpp', 'wt') as f:
    f.write(r'''/*
 * Copyright (c) 2013 Daniel Kirchner
 *
 * Copying and distribution of this file, with or without modification,
 * are permitted in any medium without royalty provided the copyright
 * notice and this notice are preserved.  This file is offered as-is,
 * without any warranty. 
 */
/* This file was generated by glcorew_gen.py.
 * Don't change it directoly, change glcorew_gen.py instead.*/
#include "glcorew.h"
#include <stdexcept>
#include <sstream>

''')
    for proc in procs:
        f.write('%(p_t)s glcorew%(p_s)s =\n'
		'    (%(p_t)s) glcorewUnsupported;\n' % proc_t(proc))
    f.write(r'''

GLAPI int APIENTRY glcorewUnsupported (...)
{
    throw std::runtime_error ("An unsupported OpenGL entry point was called.");
}

void _glcorewInit (glcorewGetProcAddressCallback getprocaddress)
{
    void *ptr;

''')
    for proc in procs:
        f.write('    ptr = getprocaddress ("%(p)s");\n'
		'    if (ptr) glcorew%(p_s)s = (%(p_t)s) ptr;\n'
                % proc_t(proc))
    f.write(r'''
}

#ifdef _WIN32
/* This workaround falls back to loading symbols
 * directly from OpenGL32.dll, as wglGetProcAddress
 * may return NULL for legacy opengl entry points. */
static HMODULE __glcorewOpengl32DllHandle = NULL;
static glcorewGetProcAddressCallback __glcorewUserGetProcAddressCallback = NULL;
inline void *__glcorewGetProcAddress (const char *name)
{
    void *ptr = NULL;
    if (__glcorewUserGetProcAddressCallback)
         ptr = __glcorewUserGetProcAddressCallback (name);
    if (!ptr && __glcorewOpengl32DllHandle)
         ptr = (void*) GetProcAddress (__glcorewOpengl32DllHandle, name);
    return ptr;
}
#endif

void glcorewInit (glcorewGetProcAddressCallback callback) {
    std::stringstream version;
    int major, minor;

#ifdef _WIN32
    __glcorewOpengl32DllHandle = LoadLibrary ("OPENGL32.DLL");
    __glcorewUserGetProcAddressCallback = callback;
    _glcorewInit (__glcorewGetProcAddress);
#else
    _glcorewInit (callback);
#endif
    if (!glcorewGetString || glcorewGetString == (PFNGLGETSTRINGPROC) glcorewUnsupported)
         throw std::runtime_error ("No entry point for glGetString found.");

    version << glcorewGetString (GL_VERSION);
    if (glGetError () != GL_NO_ERROR)
        throw std::runtime_error ("Cannot determine OpenGL version.");
    version >> major;
    version.ignore (1);
    version >> minor;

    if (major < 4 || minor < 3)
         throw std::runtime_error ("OpenGL version 4.3 or higher is required.");
}
''')
